openapi: 3.1.0
info:
  contact:
    email: goodflows@ict-abovo.gr
    name: ict abovo
    url: https://www.ict-abovo.gr/
  description: This is the swagger/OPENAPI documentation of PUC Consumer-side REST API
  title: PUC Consumer-side REST API
  version: '1.0'
servers:
  - url: /
security:
  - Bearer-jwt: []
tags:
  - description: Information model handling
    name: Information Model API
  - description: Policy Decision Point actions
    name: Policy Decision Point API
  - description: Policy model handling
    name: Policy Model API
paths:
  /informationModel/{companyID}:
    post:
      description: >-
        The model will be created from scratch if it does not exist and get
        loaded into the temp model of the returned ID (which will be flushed to
        the stored ontology upon save)
      operationId: createInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Temp information model ID:
                  description: Temp information model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the temp information model
      summary: Create Temp Information model
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}:
    delete:
      operationId: removeTempInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting information model:
                  description: Error while deleting information model
                  value: false
                Successful information model deletion:
                  description: Successful information model deletion
                  value: true
          description: >-
            Successful operation. Response boolean value indicated actual
            information model deletion
      summary: Delete temp Information model
      tags:
        - Information Model API
    get:
      operationId: openInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model:
                  description: Information model
                  value: >-
                    <rdf:RDF    
                    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
                    xmlns:PM="http://www.ict-abovo.eu/ontologies/PolicyModel#"   
                    xmlns:owl="http://www.w3.org/2002/07/owl#"   
                    xmlns:WF="http://www.ict-abovo.eu/ontologies/Workflow#"   
                    xmlns:IM="http://www.ict-abovo.eu/ontologies/InformationModel#"   
                    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"   
                    xmlns:xsd="http://www.w3.org/2001/XMLSchema#" ></rdf:RDF>
          description: >-
            Successful operation. Returns the OWL representation of the
            information model
      summary: Get/open Information model
      tags:
        - Information Model API
    post:
      operationId: saveInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model ID:
                  description: Information model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the stored information model
      summary: Save Information model
      tags:
        - Information Model API
    put:
      description: >-
        The model will be reset from scratch if the hardReset parameter is true,
        else the model will be reset to the last saved version
      operationId: resetInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: >-
            denotes whether the information model will be re-initialized (true)
            or rollbacked to the last saved state (false)
          in: query
          name: hardReset
          required: true
          schema:
            type: boolean
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model ID:
                  description: Information model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the information model
      summary: Reset Information model
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/attributes/batch:
    post:
      description: >-
        The body of the message contains a list with the attributes to be
        inserted
      operationId: createAttributes
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Batch attributes insertion request:
                description: Batch attributes insertion request
                value:
                  - attributeName: Classification
                    attributeValue: Public
                    attributeType: STRING
                    isMutable: true
                    belongsToInfoModelEntity: MedicalRecord
                    inheritedFrom: AnyDataType
                  - attributeName: RetentionPeriod
                    attributeValue: Public
                    attributeType: INTEGER
                    isMutable: true
                    belongsToInfoModelEntity: MedicalRecord
                    inheritedFrom: AnyDataType
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Attribute'
        description: >-
          Information model attributes specification


          Nodes must have been already created and the
          **belongsToInfoModelEntity** property of each attribute has to be
          provided


          **attributeType** allowed values "*SEMANTIC_TYPE*",
          "*SEMANTIC_INSTANCE*", "*SEMANTIC_LIST*", "*STRING*", "*INTEGER*",
          "*DOUBLE*", "*DATE*", "*BOOLEAN*", "*STRING_LIST*", "*DOUBLE_LIST*",
          "*INTEGER_LIST*"
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Attribute ID:
                  description: Attribute ID
                  value:
                    - ATT7be982b4dd1e4581b820254a49e5a7d9
                    - ATT2565d375dc7d477abfba3caac234f648
          description: Successful operation. Returns the IDs of the created attributes
      summary: Batch insertion of attributes
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/edge:
    delete:
      operationId: deleteEdge
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Delete edge request:
                description: Delete edge request
                value:
                  edgeType: IS_A
                  sourceNode:
                    nodeType: DATA_TYPES
                    name: Gender
                  targetNode:
                    nodeType: DATA_TYPES
                    name: PersonalInformation
            schema:
              $ref: '#/components/schemas/InformationModelEdge'
        description: Information model edge specification
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting information model edge:
                  description: Error while deleting information model edge
                  value: false
                Successful information model edge deletion:
                  description: Successful information model edge deletion
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated actual
            information model edge deletion
      summary: Delete Information model edge
      tags:
        - Information Model API
    post:
      operationId: createEdge
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Create edge request:
                description: Create edge request
                value:
                  edgeType: IS_A
                  sourceNode:
                    nodeType: DATA_TYPES
                    name: Gender
                  targetNode:
                    nodeType: DATA_TYPES
                    name: PersonalInformation
            schema:
              $ref: '#/components/schemas/InformationModelEdge'
        description: >-
          Information model edge specification. Edge connects two nodes
          belonging to the same graph (intragraph edge) or to different
          graphs(intergraph edge)


          **edgeType** allowed values (types for intragraph and intergraph
          edges) "*HAS_ATTRIBUTE (intergraph)*", "*HAS_ATTRIBUTE_INVERSE
          (intergraph)*", "*HAS_NAME (intergraph)*", "*HAS_TYPE (intergraph)*",
          "*HAS_VALUE (intergraph)*", "*HAS_STRING_VALUE (literal value)*",
          "*REFERS_TO_DATA_TYPE (intergraph)*", "*IS_OF_STATE (intergraph)*",
          "*IS_OF_FLOW_TYPE (intergraph)*", "*HOSTS_CONTAINER (intergraph)*",
          "*ACCEPTS_HUMAN_ACTOR (literal value)*", "*PROVIDES_OPERATION_INVERSE
          (intergraph)*", "*IMPLEMENTED_BY (intergraph)*",
          "*COMPLIANT_WITH_PURPOSE (intergraph)*", "*HAS_INPUT (intergraph)*",
          "*HAS_OUTPUT (intergraph)*", "*HOSTS_CONTAINER_INVERSE (intergraph)*",
          "*PROVIDES_OPERATION (intergraph)*", "*COMPLIANT_WITH_PURPOSE_INVERSE
          (intergraph)*", "*MAY_ACT_FOR_PURPOSE_INVERSE (intergraph)*",
          "*MAY_ACT_FOR_PURPOSE (intergraph)*", "*HAS_STATE_TYPE (intergraph)*",
          "*HAS_STATE_VALUE (intergraph)*", "*HAS_DEFAULT_STATE_VALUE
          (intergraph)*", "*HAS_POTENTIAL_STATE_VALUE (intergraph)*", "*IS_A
          (intragraph)*", "*IS_A_INVERSE (intragraph)*", "*IS_PART_OF
          (intragraph)*", "*CONTAINS (intragraph)*", "*MORE_DETAILED_THAN
          (intragraph)*", "*LESS_DETAILED_THAN (intragraph)*"
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while creating edge:
                  description: Error while creating edge
                  value: false
                Successful edge creation:
                  description: Successful edge creation
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated edge creation
            success
      summary: Create new Information model edge
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/edge/batch:
    post:
      operationId: createEdges
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Create edge request:
                description: Create edge request
                value:
                  - edgeType: IS_A
                    sourceNode:
                      nodeType: DATA_TYPES
                      name: Gender
                    targetNode:
                      nodeType: DATA_TYPES
                      name: PersonalInformation
                  - edgeType: IS_A
                    sourceNode:
                      nodeType: DATA_TYPES
                      name: Citizenship
                    targetNode:
                      nodeType: DATA_TYPES
                      name: PersonalInformation
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InformationModelEdge'
        description: >-
          Information model edges specification. Edge connects two nodes
          belonging to the same graph (intragraph edge) or to different
          graphs(intergraph edge)


          **edgeType** allowed values (types for intragraph and intergraph
          edges) "*HAS_ATTRIBUTE (intergraph)*", "*HAS_ATTRIBUTE_INVERSE
          (intergraph)*", "*HAS_NAME (intergraph)*", "*HAS_TYPE (intergraph)*",
          "*HAS_VALUE (intergraph)*", "*HAS_STRING_VALUE (literal value)*",
          "*REFERS_TO_DATA_TYPE (intergraph)*", "*IS_OF_STATE (intergraph)*",
          "*IS_OF_FLOW_TYPE (intergraph)*", "*HOSTS_CONTAINER (intergraph)*",
          "*ACCEPTS_HUMAN_ACTOR (literal value)*", "*PROVIDES_OPERATION_INVERSE
          (intergraph)*", "*IMPLEMENTED_BY (intergraph)*",
          "*COMPLIANT_WITH_PURPOSE (intergraph)*", "*HAS_INPUT (intergraph)*",
          "*HAS_OUTPUT (intergraph)*", "*HOSTS_CONTAINER_INVERSE (intergraph)*",
          "*PROVIDES_OPERATION (intergraph)*", "*COMPLIANT_WITH_PURPOSE_INVERSE
          (intergraph)*", "*MAY_ACT_FOR_PURPOSE_INVERSE (intergraph)*",
          "*MAY_ACT_FOR_PURPOSE (intergraph)*", "*HAS_STATE_TYPE (intergraph)*",
          "*HAS_STATE_VALUE (intergraph)*", "*HAS_DEFAULT_STATE_VALUE
          (intergraph)*", "*HAS_POTENTIAL_STATE_VALUE (intergraph)*", "*IS_A
          (intragraph)*", "*IS_A_INVERSE (intragraph)*", "*IS_PART_OF
          (intragraph)*", "*CONTAINS (intragraph)*", "*MORE_DETAILED_THAN
          (intragraph)*", "*LESS_DETAILED_THAN (intragraph)*"
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while creating edges:
                  description: Error while creating edges
                  value: false
                Successful edges creation:
                  description: Successful edges creation
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated edges creation
            success
      summary: Batch insertion of Information model edges
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/import:
    put:
      description: The imported information model is provided with the body of the message
      operationId: importInformationModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          'text/plain ':
            examples:
              Information model:
                description: Information model
                value: >-
                  <rdf:RDF    
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
                  xmlns:PM="http://www.ict-abovo.eu/ontologies/PolicyModel#"   
                  xmlns:owl="http://www.w3.org/2002/07/owl#"   
                  xmlns:WF="http://www.ict-abovo.eu/ontologies/Workflow#"   
                  xmlns:IM="http://www.ict-abovo.eu/ontologies/InformationModel#"   
                  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"   
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema#" ></rdf:RDF>
            schema:
              type: string
        description: OWL representation of the information model
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model ID:
                  description: Information model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the information model
      summary: Import existing Information model
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/importAll:
    put:
      description: >-
        The imported models are provided with the body of the message as a .zip
        attachment.
      operationId: importAllModels
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
        description: >-
          ZIP file containing information model, policy model as well as process
          models
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model ID:
                  description: Information model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: >-
            Successful operation. Returns the ID of the imported information
            model
      summary: Import information model, policy model as well as process models
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node:
    post:
      operationId: createNode
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Create information model node request:
                description: Create information model node request
                value:
                  nodeType: DATA_TYPES
                  name: ZipCode
            schema:
              $ref: '#/components/schemas/InformationModelNode'
        description: >-
          information model node specification


          **nodetype** allowed values "*ROLES*", "*EVENT_TYPES*",
          "*OPERATIONS*", "*DATA_TYPES*", "*MACHINE_TYPES*", "*PURPOSES*",
          "*ATTRIBUTES*", "*ATTRIBUTE_NAMES*", "*ATTRIBUTE_TYPES*",
          "*CONTEXT_TYPES*", "*DATA_IOS*", "*FLOWTYPES*",
          "*ORGANISATION_TYPES*", "*STATES*", "*STATE_TYPES*", "*STATE_VALUES*",
          "*OPERATION_CONTAINER_TYPES*"
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model node ID:
                  description: Information model node ID
                  value: ZipCode
          description: >-
            Successful operation. Returns the ID of the created information
            model node
      summary: Create new Information model node
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/batch:
    post:
      description: The body of the message contains a list with the nodes to be inserted
      operationId: createNodes
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Create information model nodes request:
                description: Create information model nodes request
                value:
                  - nodeType: DATA_TYPES
                    name: ZipCode
                  - nodeType: DATA_TYPES
                    name: StreetName
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InformationModelNode'
        description: >-
          information model node specification


          **nodetype** allowed values "*ROLES*", "*EVENT_TYPES*",
          "*OPERATIONS*", "*DATA_TYPES*", "*MACHINE_TYPES*", "*PURPOSES*",
          "*ATTRIBUTES*", "*ATTRIBUTE_NAMES*", "*ATTRIBUTE_TYPES*",
          "*CONTEXT_TYPES*", "*DATA_IOS*", "*FLOWTYPES*",
          "*ORGANISATION_TYPES*", "*STATES*", "*STATE_TYPES*", "*STATE_VALUES*",
          "*OPERATION_CONTAINER_TYPES*"
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model node IDs:
                  description: Information model node IDs
                  value:
                    - ZipCode
                    - StreetName
          description: >-
            Successful operation. Returns the IDs of the created information
            model nodes
      summary: Batch insertion of nodes
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/{name}:
    delete:
      operationId: deleteNode
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting information model node:
                  description: Error while deleting information model node
                  value: false
                Successful information model node deletion:
                  description: Successful information model node deletion
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated actual
            information model node deletion
      summary: Delete Information model node
      tags:
        - Information Model API
    get:
      operationId: getNode
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model node:
                  description: Information model node
                  value:
                    nodeType: DATA_TYPES
                    name: ZipCode
              schema:
                $ref: '#/components/schemas/InformationModelNode'
          description: Successful operation. Returns information model node information
      summary: Get Information model node
      tags:
        - Information Model API
    put:
      operationId: editNode
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: Current information model node name
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: New information model node name
          in: query
          name: newName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Information model node ID:
                  description: Information model node ID
                  value: ZipCode2
          description: >-
            Successful operation. Returns the new ID of the information model
            node
      summary: Rename Information model node
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/{name}/attributes:
    get:
      operationId: getAttributes
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model node attributes:
                  description: Information model node attributes
                  value:
                    - attributeID: ATT7be982b4dd1e4581b820254a49e5a7d9
                      attributeName: OwnerId
                      belongsToInfoModelEntity: Identifier
                      attributeValue: Identifier
                      attributeType: SEMANTIC_INSTANCE
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT48c3beabdbb54d8e98546bc49b7b4364
                      attributeName: Id
                      belongsToInfoModelEntity: Identifier
                      attributeValue: Identifier
                      attributeType: SEMANTIC_INSTANCE
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATTf02bcc1bbd644aeface9b904545dc292
                      attributeName: State
                      belongsToInfoModelEntity: Identifier
                      attributeValue: null
                      attributeType: STRING
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT52682b89306543e28918141a4bcd17a9
                      attributeName: RetentionPeriod
                      belongsToInfoModelEntity: Identifier
                      attributeValue: null
                      attributeType: INTEGER
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT2565d375dc7d477abfba3caac234f648
                      attributeName: RetentionPeriodHasExpired
                      belongsToInfoModelEntity: Identifier
                      attributeValue: 'false'
                      attributeType: BOOLEAN
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT4f3290cd1c7a4c0381c81df3e65bb363
                      attributeName: ConsentProvided
                      belongsToInfoModelEntity: Identifier
                      attributeValue: 'false'
                      attributeType: BOOLEAN
                      isMutable: true
                      inheritedFrom: AnyDataType
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
          description: Successful operation. Returns the list of the node's attributes
      summary: Get Information model node attributes
      tags:
        - Information Model API
    post:
      operationId: createAttribute
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Create attribute request:
                description: Create attribute request
                value:
                  attributeName: Classification
                  attributeValue: Public
                  attributeType: STRING
                  isMutable: true
                  belongsToInfoModelEntity: MedicalRecord
                  inheritedFrom: AnyDataType
            schema:
              $ref: '#/components/schemas/Attribute'
        description: >-
          Information model attribute specification


          **belongsToInfoModelEntity** is redundant in this case as it is the
          same with the path parameter {*name*}, but it is necessary for batch
          insertion of attributes.


          **attributeType** allowed values "*SEMANTIC_TYPE*",
          "*SEMANTIC_INSTANCE*", "*SEMANTIC_LIST*", "*STRING*", "*INTEGER*",
          "*DOUBLE*", "*DATE*", "*BOOLEAN*", "*STRING_LIST*", "*DOUBLE_LIST*",
          "*INTEGER_LIST*"
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Attribute ID:
                  description: Attribute ID
                  value: ATT7be982b4dd1e4581b820254a49e5a7d9
          description: Successful operation. Returns the ID of the created attribute
      summary: Create new Information model node attribute
      tags:
        - Information Model API
    put:
      operationId: editAttribute
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: >-
            denotes whether deletion will be propagated towards all node's
            descendants
          in: query
          name: propagateChangesToDescendants
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            examples:
              Update attribute request:
                description: Update attribute request
                value:
                  attributeID: ATT2565d375dc7d477abfba3caac234f648
                  attributeName: RetentionPeriodHasExpired
                  attributeValue: 'false'
                  attributeType: BOOLEAN
                  isMutable: 'true'
                  belongsToInfoModelEntity: Identifier
                  inheritedFrom: ''
            schema:
              $ref: '#/components/schemas/Attribute'
        description: >-
          Information model attribute to be updated


          **belongsToInfoModelEntity** is is necessary for attribute update.


          **attributeType** allowed values "*SEMANTIC_TYPE*",
          "*SEMANTIC_INSTANCE*", "*SEMANTIC_LIST*", "*STRING*", "*INTEGER*",
          "*DOUBLE*", "*DATE*", "*BOOLEAN*", "*STRING_LIST*", "*DOUBLE_LIST*",
          "*INTEGER_LIST*"
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while updating attribute:
                  description: Error while updating attribute
                  value: false
                Successful attribute update:
                  description: Successful attribute update
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated attribute edit
            success
      summary: Edit Information model node attribute
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/{name}/attributes/{attributeID}:
    delete:
      operationId: deleteAttribute
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: unique name of the attribute to be deleted
          in: path
          name: attributeID
          required: true
          schema:
            type: string
        - description: >-
            denotes whether deletion will be propagated towards all node's
            descendants
          in: query
          name: propagateDeletionToDescendants
          required: true
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting attributes:
                  description: Error while deleting attributes
                  value: false
                Successful attributes deletion:
                  description: Successful attributes deletion
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated attributes
            deletion
      summary: Delete Information model node attribute
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/{name}/intraGraphRelations:
    get:
      operationId: getIntraGraphRelations
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: direction criterion
          in: query
          name: searchDirection
          required: false
          schema:
            type: string
        - description: related cell criterion
          in: query
          name: searchRelatedCell
          required: false
          schema:
            type: string
        - description: relation type criterion
          in: query
          name: searchRelatedType
          required: false
          schema:
            type: string
        - description: first result pagination criterion
          in: query
          name: firstResult
          required: false
          schema:
            type: integer
            format: int32
        - description: page size pagination criterion
          in: query
          name: pageSize
          required: false
          schema:
            type: integer
            format: int32
        - description: order criterion
          in: query
          name: orderExprType
          required: false
          schema:
            type: string
            enum:
              - direction
              - relatedCell
              - relatedType
              - relatedContext
        - description: pagination order
          in: query
          name: ascOrDesc
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model relations:
                  description: Information model relations
                  value:
                    data:
                      - relationType: IS_A
                        name: AnyDataType
                        nodeType: DATA_TYPES
                        direction: origin
                      - relationType: IS_PART_OF
                        name: PatientInformation
                        nodeType: DATA_TYPES
                        direction: origin
                      - relationType: IS_A_INVERSE
                        name: Address
                        nodeType: DATA_TYPES
                        direction: destination
                      - relationType: IS_A_INVERSE
                        name: MaritalStatus
                        nodeType: DATA_TYPES
                        direction: destination
                      - relationType: IS_A_INVERSE
                        name: isAdult
                        nodeType: DATA_TYPES
                        direction: destination
                    pagination:
                      totalResults: 11
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InformationModelRelation'
          description: >-
            Successful operation. Returns the list of related nodes together
            with pagination info
      summary: Get Information model node relations in the graph it belongs
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/node/{name}/relatedNodes/{edgeType}:
    get:
      operationId: getRelatedNodes
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: unique name of the information model node
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: edgeType of interest
          in: path
          name: edgeType
          required: true
          schema:
            type: string
            enum:
              - HAS_ATTRIBUTE
              - HAS_ATTRIBUTE_INVERSE
              - HAS_NAME
              - HAS_TYPE
              - HAS_VALUE
              - HAS_STRING_VALUE
              - REFERS_TO_DATA_TYPE
              - IS_OF_STATE
              - IS_OF_FLOW_TYPE
              - HOSTS_CONTAINER
              - ACCEPTS_HUMAN_ACTOR
              - PROVIDES_OPERATION_INVERSE
              - IMPLEMENTED_BY
              - COMPLIANT_WITH_PURPOSE
              - HAS_INPUT
              - HAS_OUTPUT
              - HOSTS_CONTAINER_INVERSE
              - PROVIDES_OPERATION
              - COMPLIANT_WITH_PURPOSE_INVERSE
              - MAY_ACT_FOR_PURPOSE_INVERSE
              - MAY_ACT_FOR_PURPOSE
              - HAS_STATE_TYPE
              - HAS_STATE_VALUE
              - HAS_DEFAULT_STATE_VALUE
              - HAS_POTENTIAL_STATE_VALUE
              - IS_A
              - IS_A_INVERSE
              - IS_PART_OF
              - CONTAINS
              - MORE_DETAILED_THAN
              - LESS_DETAILED_THAN
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model related nodes:
                  description: Information model related nodes
                  value:
                    - nodeType: DATA_TYPES
                      name: Age
                    - nodeType: DATA_TYPES
                      name: PersonalInformation
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InformationModelNode'
          description: Successful operation. Returns the list of related nodes
      summary: Get Information model node related nodes by edgeType
      tags:
        - Information Model API
  /informationModel/{companyID}/{informationModelID}/{nodeType}:
    get:
      operationId: getNodesOfType
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the information model
          in: path
          name: informationModelID
          required: true
          schema:
            type: string
        - description: node type of interest
          in: path
          name: nodeType
          required: true
          schema:
            type: string
            enum:
              - ROLES
              - EVENT_TYPES
              - OPERATIONS
              - DATA_TYPES
              - MACHINE_TYPES
              - PURPOSES
              - ATTRIBUTES
              - ATTRIBUTE_NAMES
              - ATTRIBUTE_TYPES
              - CONTEXT_TYPES
              - DATA_IOS
              - FLOWTYPES
              - ORGANISATION_TYPES
              - STATES
              - STATE_TYPES
              - STATE_VALUES
              - OPERATION_CONTAINER_TYPES
      responses:
        '200':
          content:
            application/json:
              examples:
                Information model attributes of specific type:
                  description: Information model attributes of specific type
                  value:
                    - attributeID: ATT7be982b4dd1e4581b820254a49e5a7d9
                      attributeName: OwnerId
                      belongsToInfoModelEntity: Identifier
                      attributeValue: Identifier
                      attributeType: SEMANTIC_INSTANCE
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT48c3beabdbb54d8e98546bc49b7b4364
                      attributeName: Id
                      belongsToInfoModelEntity: Identifier
                      attributeValue: Identifier
                      attributeType: SEMANTIC_INSTANCE
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATTf02bcc1bbd644aeface9b904545dc292
                      attributeName: State
                      belongsToInfoModelEntity: Identifier
                      attributeValue: null
                      attributeType: STRING
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT52682b89306543e28918141a4bcd17a9
                      attributeName: RetentionPeriod
                      belongsToInfoModelEntity: Identifier
                      attributeValue: null
                      attributeType: INTEGER
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT2565d375dc7d477abfba3caac234f648
                      attributeName: RetentionPeriodHasExpired
                      belongsToInfoModelEntity: Identifier
                      attributeValue: 'false'
                      attributeType: BOOLEAN
                      isMutable: true
                      inheritedFrom: AnyDataType
                    - attributeID: ATT4f3290cd1c7a4c0381c81df3e65bb363
                      attributeName: ConsentProvided
                      belongsToInfoModelEntity: Identifier
                      attributeValue: 'false'
                      attributeType: BOOLEAN
                      isMutable: true
                      inheritedFrom: AnyDataType
                Information model nodes of specific type:
                  description: Information model nodes of specific type
                  value:
                    - nodeType: DATA_TYPES
                      name: Age
                    - nodeType: DATA_TYPES
                      name: PersonalInformation
              schema:
                type: array
                items:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/InformationModelNode'
                    - $ref: '#/components/schemas/Attribute'
          description: >-
            Successful operation. Returns the list of the nodes or attributes of
            the specific type.


            Attributes are returned only for nodeType value "**ATTRIBUTES**".
      summary: Get Information model nodes/attributes of specific type
      tags:
        - Information Model API
  /pdp/{companyID}/conflicts:
    post:
      operationId: generateConflictsAndAlternativeActions
      parameters:
        - description: ID of the company (domain)
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: >-
            allows suggestion of purposes irrelevant to the given one by the DPW
            designer
          in: query
          name: flexiblePurpose
          required: true
          schema:
            type: boolean
        - description: >-
            allow suggestion of actors irrelevant to the given one by the DPW
            designer
          in: query
          name: flexibleActor
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            examples:
              Conflict request example:
                description: Conflict request example
                value:
                  intention:
                    purpose: Estimate_Fitness_Level
                    actor:
                      concept: User
                      constraint: null
                    operation:
                      concept: PublishResults
                      constraint: null
                    resource:
                      concept: TrainingMeasurements
                      constraint: null
                    context: null
                  usageConstraints:
                    '@context':
                      upcast: https://www.upcast-project.eu/upcast-vocab/1.0/
                      dcat: http://www.w3.org/ns/dcat#
                      dpv: https://w3id.org/dpv#
                      foaf: http://xmlns.com/foaf/0.1/
                      idsa-core: https://w3id.org/idsa/core/
                      dct: http://purl.org/dc/terms/
                      odrl: http://www.w3.org/ns/odrl/2/
                    '@graph':
                      - '@id': >-
                          http://upcast-project.eu/distribution/example-distribution-dataset-1
                        '@type': dcat:Distribution
                        dct:description: Example Distribution of a Dataset
                        dct:format: csv
                        dct:title: CSV Distribution of Dataset 1
                        dcat:byteSize: 346
                        dcat:mediaType: text/csv
                      - '@id': http://upcast-project.eu/dataset/example-dataset-1
                        '@type': dcat:Dataset
                        dcat:theme:
                          - http://www.upcast-project.com/TrainingMeasurements
                        dct:title: Example Dataset
                        dct:description: >-
                          Example of a Dataset showing a minimal set of
                          properties for Usage Constraints
                        dct:publisher:
                          '@id': >-
                            https://upcast-project.eu/producer/example-data-provider
                        idsa-core:Provider:
                          '@id': >-
                            https://upcast-project.eu/producer/example-data-provider
                        dcat:distribution:
                          '@id': http://upcast-project.eu/dataset/example-dataset-1
                        odrl:hasPolicy:
                          '@id': >-
                            http://upcast-project.eu/policy/usage-constraint-example
                      - '@id': >-
                          https://upcast-project.eu/provider/example-data-provider
                        '@type':
                          - foaf:Agent
                          - foaf:Organization
                        foaf:name: Data Provider Organization
                      - '@id': >-
                          http://upcast-project.eu/policy/usage-constraint-example
                        '@type': odrl:Offer
                        odrl:permission:
                          '@id': http://example.com/permission:001
                          odrl:action:
                            '@id': https://w3id.org/dpv#PublishResults
                          odrl:assigner:
                            '@id': http://www.upcast-project.com/nissa
                          odrl:assignee:
                            '@id': https://w3id.org/dpv#User
                          odrl:target:
                            '@id': http://www.upcast-project.com/TrainingMeasurements
                          odrl:constraint:
                            odrl:leftOperand: https://w3id.org/dpv#Purpose
                            odrl:operator: odrl:eq
                            odrl:rightOperand: https://w3id.org/dpv#RequestedServiceProvision
            schema:
              $ref: '#/components/schemas/ApiConflictRequest'
        description: >-
          object containing DPW designer intention, i.e., purpose, context,
          actor, operation, resource entities (concepts along with constraints)
          and the usage contraints (expressed in ODRL) against which the given
          intention will be evaluated
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Conflict example:
                  description: Conflict example
                  value:
                    - intention:
                        purpose: Estimate_Fitness_Level
                        actor:
                          concept: User
                          concreteEntity: null
                          constraint: null
                        operation:
                          concept: PublishResults
                          concreteEntity: null
                          constraint: null
                        resource:
                          concept: TrainingMeasurements
                          concreteEntity: null
                          constraint: null
                        context: null
                      updatedIntention:
                        purpose: null
                        actor: null
                        operation: null
                        resource: null
                        context: null
                        combinedResources: []
                        negativePreActions: []
                        negativePostActions: []
                        positivePreActions: []
                        positivePostActions: []
                      originalRuleIds:
                        - http://example.com/permission:001
              schema:
                $ref: '#/components/schemas/ApiConflict'
          description: >-
            Successful operation. Returns a list of conflicts formed as a given
            intention and an updatedItention if such potential resolution
            exists, or no updatedIntention otherwise
      summary: >-
        Evaluates an action to be performed for a purpose under some context
        against given usage constraints of the requested resource and proposes
        possible fixes
      tags:
        - Policy Decision Point API
  /pdp/{companyID}/odrlConflicts:
    post:
      operationId: generateODRLConflicts
      parameters:
        - in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: >-
            allows suggestion of purposes irrelevant to the given one by the DPW
            designer
          in: query
          name: flexiblePurpose
          required: true
          schema:
            type: boolean
        - description: >-
            allow suggestion of actors irrelevant to the given one by the DPW
            designer
          in: query
          name: flexibleActor
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            examples:
              ODRL Conflict request example:
                description: ODRL Conflict request example
                value:
                  odrlRequest:
                    '@context':
                      - http://www.w3.org/ns/odrl.jsonld
                      - dcat: http://www.w3.org/ns/dcat#
                        dpv: https://w3id.org/dpv#
                        rdf: https://www.w3.org/TR/rdf12-schema#
                    '@type': Policy
                    profile: http://example.com/odrl:profile:03
                    uid: http://example.com/policy:001
                    permission:
                      - target: https://w3id.org/dpv#TrainingMeasurements
                        assigner: http://www.upcast-project.com/nissa
                        assignee: https://w3id.org/dpv#Trainer
                        action: https://w3id.org/dpv#PublishResults
                        constraint:
                          leftOperand: https://w3id.org/dpv#Purpose
                          operator: eq
                          rightOperand: http://www.upcast-project.com/Leaderboard
                  usageConstraints:
                    '@context':
                      upcast: https://www.upcast-project.eu/upcast-vocab/1.0/
                      dcat: http://www.w3.org/ns/dcat#
                      dpv: https://w3id.org/dpv#
                      foaf: http://xmlns.com/foaf/0.1/
                      idsa-core: https://w3id.org/idsa/core/
                      dct: http://purl.org/dc/terms/
                      odrl: http://www.w3.org/ns/odrl/2/
                    '@graph':
                      - '@id': >-
                          http://upcast-project.eu/distribution/example-distribution-dataset-1
                        '@type': dcat:Distribution
                        dct:description: Example Distribution of a Dataset
                        dct:format: csv
                        dct:title: CSV Distribution of Dataset 1
                        dcat:byteSize: 346
                        dcat:mediaType: text/csv
                      - '@id': http://upcast-project.eu/dataset/example-dataset-1
                        '@type': dcat:Dataset
                        dcat:theme:
                          - >-
                            http://www.ict-abovo.eu/ontologies/InformationModel#TrainingMeasurements
                        dct:title: Example Dataset
                        dct:description: >-
                          Example of a Dataset showing a minimal set of
                          properties for Usage Constraints
                        dct:publisher:
                          '@id': >-
                            https://upcast-project.eu/producer/example-data-provider
                        idsa-core:Provider:
                          '@id': >-
                            https://upcast-project.eu/producer/example-data-provider
                        dcat:distribution:
                          '@id': http://upcast-project.eu/dataset/example-dataset-1
                        odrl:hasPolicy:
                          '@id': >-
                            http://upcast-project.eu/policy/usage-constraint-example
                      - '@id': >-
                          https://upcast-project.eu/provider/example-data-provider
                        '@type':
                          - foaf:Agent
                          - foaf:Organization
                        foaf:name: Data Provider Organization
                      - '@id': >-
                          http://upcast-project.eu/policy/usage-constraint-example
                        '@type': odrl:Offer
                        odrl:permission:
                          '@id': http://example.com/permission:001
                          odrl:action:
                            '@id': https://w3id.org/dpv#PublishResults
                          odrl:assigner:
                            '@id': http://www.upcast-project.com/nissa
                          odrl:assignee:
                            '@id': https://w3id.org/dpv#User
                          odrl:target:
                            '@id': http://www.upcast-project.com/TrainingMeasurements
                          odrl:constraint:
                            odrl:leftOperand: dpv:Purpose
                            odrl:operator: odrl:eq
                            odrl:rightOperand: >-
                              http://www.upcast-project.com/Estimate_Fitness_Level
            schema:
              $ref: '#/components/schemas/ApiODRLConflictRequest'
        description: >-
          object containing the odrl:request and the odrl:offer along with the
          description of the dataset (dcat:Dataset), i.e, a usage constraints
          object
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Conflict example:
                  description: Conflict example
                  value:
                    - intention:
                        purpose: Leaderboard
                        actor:
                          concept: Trainer
                          concreteEntity: null
                          constraint: null
                        operation:
                          concept: PublishResults
                          concreteEntity: null
                          constraint: null
                        resource:
                          concept: TrainingMeasurements
                          concreteEntity: null
                          constraint: null
                        context: null
                      updatedIntention:
                        purpose: Estimate_Fitness_Level
                        actor:
                          concept: Trainer
                          concreteEntity: null
                          constraint: null
                        operation:
                          concept: PublishResults
                          concreteEntity: null
                          constraint: null
                        resource:
                          concept: TrainingMeasurements
                          concreteEntity: null
                          constraint: null
                        context: null
                        combinedResources: []
                        negativePreActions: []
                        negativePostActions: []
                        positivePreActions: []
                        positivePostActions: []
                      originalRuleIds:
                        - http://example.com/permission:001
              schema:
                $ref: '#/components/schemas/ApiConflict'
          description: >-
            Successful operation. Returns a list of conflicts formed as a given
            intention and an updatedItention if such potential resolution
            exists, or no updatedIntention otherwise
      summary: Evaluates an odrl:request against an odrl:offer
      tags:
        - Policy Decision Point API
  /policyModel/{companyID}:
    post:
      description: >-
        The model will be created from scratch if it does not exist and get
        loaded into the temp model of the returned ID (which will be flushed to
        the stored ontology upon save)
      operationId: createPolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Temp policy model ID:
                  description: Temp policy model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the temp policy model
      summary: Create Temp Policy model
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}:
    delete:
      operationId: removeTempPolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting policy model:
                  description: Error while deleting policy model
                  value: false
                Successful policy model deletion:
                  description: Successful policy model deletion
                  value: true
          description: >-
            Successful operation. Response boolean value indicated actual policy
            model deletion
      summary: Delete temp Policy model
      tags:
        - Policy Model API
    get:
      operationId: openPolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Policy model:
                  description: Policy model
                  value: >-
                    <rdf:RDF    
                    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
                    xmlns:PM="http://www.ict-abovo.eu/ontologies/PolicyModel#"   
                    xmlns:owl="http://www.w3.org/2002/07/owl#"   
                    xmlns:WF="http://www.ict-abovo.eu/ontologies/Workflow#"   
                    xmlns:IM="http://www.ict-abovo.eu/ontologies/InformationModel#"   
                    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"   
                    xmlns:xsd="http://www.w3.org/2001/XMLSchema#" ></rdf:RDF>
          description: >-
            Successful operation. Returns the OWL representation of the policy
            model
      summary: Get/open Policy model
      tags:
        - Policy Model API
    post:
      operationId: savePolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Policy model ID:
                  description: Policy model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the stored policy model
      summary: Save Policy model
      tags:
        - Policy Model API
    put:
      description: >-
        The model will be reset from scratch if the hardReset parameter is true,
        else the model will be reset to the last saved version
      operationId: resetPolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
        - in: query
          name: hardReset
          required: true
          schema:
            type: boolean
      responses:
        '200':
          content:
            text/plain:
              examples:
                Policy model ID:
                  description: Policy model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the policy model
      summary: Reset Policy model
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/create:
    post:
      description: >-
        The model will be created from scratch if it does not exist and get
        loaded into the temp model of the given ID (which will be flushed to the
        stored ontology upon save)
      operationId: createPolicyModel_1
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              examples:
                Temp policy model ID:
                  description: Temp policy model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the policy model
      summary: Create Temp Policy model with given ID
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/import:
    put:
      description: The imported policy model is provided with the body of the message
      operationId: importPolicyModel
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          'text/plain ':
            examples:
              Policy model:
                description: Policy model
                value: >-
                  <rdf:RDF    
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   
                  xmlns:PM="http://www.ict-abovo.eu/ontologies/PolicyModel#"   
                  xmlns:owl="http://www.w3.org/2002/07/owl#"   
                  xmlns:WF="http://www.ict-abovo.eu/ontologies/Workflow#"   
                  xmlns:IM="http://www.ict-abovo.eu/ontologies/InformationModel#"   
                  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"   
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema#" ></rdf:RDF>
            schema:
              type: string
        description: OWL representation of the policy model
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Policy model ID:
                  description: Policy model ID
                  value: 16afa1ee8a564d2086f05e901a39a80a
          description: Successful operation. Returns the ID of the policy model
      summary: Import existing Policy model
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/rule:
    get:
      description: All query parameters are optional
      operationId: getRules
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
        - description: >-
            rule type of interest. Allowed values: *Permissions*,
            *Prohibitions*, *Obligations*
          in: query
          name: ruleType
          required: false
          schema:
            type: string
        - description: rule ID criterion
          in: query
          name: searchRuleId
          required: false
          schema:
            type: string
        - description: purpose criterion
          in: query
          name: searchPurpose
          required: false
          schema:
            type: string
        - description: rule description criterion
          in: query
          name: searchDescription
          required: false
          schema:
            type: string
        - description: actor criterion
          in: query
          name: searchActor
          required: false
          schema:
            type: string
        - description: operation criterion
          in: query
          name: searchOperation
          required: false
          schema:
            type: string
        - description: resource criterion
          in: query
          name: searchResource
          required: false
          schema:
            type: string
        - description: organisation criterion
          in: query
          name: searchOrganisation
          required: false
          schema:
            type: string
        - description: derived from rule with ID criterion
          in: query
          name: derivedFromRuleID
          required: false
          schema:
            type: string
        - description: first result pagination criterion
          in: query
          name: firstResult
          required: false
          schema:
            type: integer
            format: int64
        - description: page size pagination criterion
          in: query
          name: pageSize
          required: false
          schema:
            type: integer
            format: int64
        - description: order criterion
          in: query
          name: orderExprType
          required: false
          schema:
            type: string
            enum:
              - mainActionActor
              - mainActionOperation
              - mainActionResource
              - mainActionOrganisation
              - rule
              - purpose
              - derivedFromRuleID
              - ruleType
              - description
        - description: pagination order
          in: query
          name: ascOrDesc
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          content:
            application/json:
              examples:
                List of rules of the specific type:
                  description: List of rules of the specific type
                  value:
                    - '@type': ApiRule
                      id: PERf1ce653996b7428aa6f4c052f30489ec
                      label: null
                      ruleType: Permissions
                      description: >-
                        Data subjects should have write access to their data -->
                        Data subjects can only update their county --> Update
                        will be logged afterwards
                      purpose: DataRectification
                      action:
                        '@type': ApiAction
                        id: AC1c4a8078586c4809a83ed2148db862f7
                        label: Action
                        actor:
                          '@type': ApiEnhancedEntity
                          id: EE7831e1c7d52f401ab3093cea6bb198d4
                          label: null
                          entityBase: DataSubject
                          constraint: null
                        operation:
                          '@type': ApiEnhancedEntity
                          id: EEf6897e9b44e0447c86af86ad1f9e0c6a
                          label: null
                          entityBase: Write
                          constraint: null
                        resource:
                          '@type': ApiEnhancedEntity
                          id: EEf6ea87901e2742aea2140cd501789779
                          label: null
                          entityBase: County
                          constraint:
                            '@type': ApiExpression
                            id: PEX372ad1436b9845c384c29c2a4206f228
                            label: null
                            subject: OwnerId
                            operator: equals
                            stringValue: null
                            policyModelEntityValue:
                              '@type': ApiVariableConstraint
                              id: VC1269def2939c403b8e628a78bb0b0a70
                              label: null
                              variableConstraintBase:
                                '@type': ApiVariable
                                id: VARbe5914ccee494c39bcbf17b37f91c526
                                label: null
                                variableStructure: Action.Actor
                              constraintProperty: Id
                            valueType: VariableBasedConstraint
                            isNested: false
                        organisation:
                          '@type': ApiEnhancedEntity
                          id: EEdc5df22462de4a67bf057cc8fd9a9896
                          label: null
                          entityBase: InternalOrganisation
                          constraint: null
                      preActionStructure: null
                      postActionStructure:
                        '@type': APIRequiredAction
                        id: RACa14964e71b3f4f2db89389b5232f2a2b
                        label: null
                        action:
                          '@type': ApiAction
                          id: ACcd956b8410f84469933bafe73d5324e9
                          label: Postaction1
                          actor:
                            '@type': ApiEnhancedEntity
                            id: EE4b0fd06390a44a0d9b61f1595066b60e
                            label: null
                            entityBase: Administrator
                            constraint: null
                          operation:
                            '@type': ApiEnhancedEntity
                            id: EEc4c0fcd6348f451e8de45c55b4a74c8a
                            label: null
                            entityBase: LogAccessControlDecision
                            constraint: null
                          resource:
                            '@type': ApiEnhancedEntity
                            id: EE3f6ebd21995c453eabc5ef6ba518ce91
                            label: null
                            entityBase: AccessControlLog
                            constraint: null
                          organisation:
                            '@type': ApiEnhancedEntity
                            id: EEfbb02da82aab4b07add05977b023cba4
                            label: null
                            entityBase: InternalOrganisation
                            constraint: null
                        sequenceConstraint: After
                      context: null
                      derivedFromRuleID: null
                    - '@type': ApiRule
                      id: PER87b579de655e493791d685bf097308ae
                      label: null
                      ruleType: Permissions
                      description: >-
                        Data subjects should have write access to their data -->
                        Data subjects can only update their county --> Update
                        will be logged afterwards
                      purpose: DataRectification
                      action:
                        '@type': ApiAction
                        id: AC2b3235b6be9c4ffb85636f5122758fff
                        label: Action_Inferred
                        actor:
                          '@type': ApiEnhancedEntity
                          id: EEce9d613ee0c1416fb68f12019d29c9c3
                          label: null
                          entityBase: Patient
                          constraint: null
                        operation:
                          '@type': ApiEnhancedEntity
                          id: EEc3b5fa0409244e4e9383a5bc7cb114e0
                          label: null
                          entityBase: UpdatePersonalInformation
                          constraint: null
                        resource:
                          '@type': ApiEnhancedEntity
                          id: EE804b34ab3be94f6d9e89b24d841ff607
                          label: null
                          entityBase: County
                          constraint:
                            '@type': ApiExpression
                            id: PEX9275b511661c41dd8ef99c8badaf70f9
                            label: null
                            subject: OwnerId
                            operator: equals
                            stringValue: null
                            policyModelEntityValue:
                              '@type': ApiVariableConstraint
                              id: VC9f4edbd9cd7149629dff5dd62693bfcd
                              label: null
                              variableConstraintBase:
                                '@type': ApiVariable
                                id: VARa342142a69014d28b033e3c6b3629047
                                label: null
                                variableStructure: Action_Inferred.Actor
                              constraintProperty: Id
                            valueType: VariableBasedConstraint
                            isNested: false
                        organisation:
                          '@type': ApiEnhancedEntity
                          id: EE5e1f33048e014cfead8a9060b261f6cd
                          label: null
                          entityBase: InternalOrganisation
                          constraint: null
                      preActionStructure: null
                      postActionStructure:
                        '@type': APIRequiredAction
                        id: RAC6f18bcbabe5149a099885b61a5f12eeb
                        label: null
                        action:
                          '@type': ApiAction
                          id: AC80bb533f081a4e0d99947ca73c48402e
                          label: Postaction1
                          actor:
                            '@type': ApiEnhancedEntity
                            id: EE81a9f3d03d9441968098a8e366ba016d
                            label: null
                            entityBase: Administrator
                            constraint: null
                          operation:
                            '@type': ApiEnhancedEntity
                            id: EEb4859d7e927e4f31858f81615b97721d
                            label: null
                            entityBase: LogAccessControlDecision
                            constraint: null
                          resource:
                            '@type': ApiEnhancedEntity
                            id: EE6449e4f9e1dc404f8c22d48cc5f17e6f
                            label: null
                            entityBase: AccessControlLog
                            constraint: null
                          organisation:
                            '@type': ApiEnhancedEntity
                            id: EE9387ce6a9b834d0ca2f787a5cad47b80
                            label: null
                            entityBase: InternalOrganisation
                            constraint: null
                        sequenceConstraint: After
                      context: null
                      derivedFromRuleID: PERf1ce653996b7428aa6f4c052f30489ec
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiRule'
          description: Successful operation. Returns rules specification
      summary: Get rules satisfying given criteria
      tags:
        - Policy Model API
    post:
      operationId: createRule
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Permission rule example:
                description: Permission rule example
                value:
                  '@type': ApiRule
                  id: null
                  label: null
                  ruleType: Permissions
                  description: This is a test permission
                  purpose: AntiTerrorismOperations
                  action:
                    '@type': ApiAction
                    id: null
                    label: Action
                    actor:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnyRole
                      constraint: null
                    operation:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: Analyse
                      constraint: null
                    resource:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnonymisedData
                      constraint: null
                    organisation:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnyOrganisationType
                      constraint: null
                  preActionStructure: null
                  postActionStructure: null
                  context: null
                  derivedFromRuleID: null
            schema:
              $ref: '#/components/schemas/ApiRule'
        description: "Rule specification\n\n**@type** allowed values *ApiRule*, *ApiAction*, *ApiExpression*, *ApiLogicalRelation*, *APIRequiredAction*, *ApiVariable*, *ApiVariableConstraint*, *ApiEnhancedEntity*\n\n**ApiRule** structure\n\n\t\"id\" the ID of the rule in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the rule\n\n\t\"ruleType\" the type of the rule (mandatory)\n\n\t\"description\" description of the rule\n\n\t\"purpose\" the purpose for which the rule applies (purpose is defined in the information model)\n\n\t\"action\" the action for which the rule applies, it is an \"ApiAction\" instance\n\n\t\"preActionStructure\" the pre-action/s that must have preceded the action of the rule. preActionStructure can be either an \"APIRequiredAction\" or a \"ApiLogicalRelation\" instance.\n\n\t\"postActionStructure\" the pre-action/s that must follow the action of the rule. postActionStructure can be either an \"APIRequiredAction\" or a \"ApiLogicalRelation\" instance.\n\n\t\"context\" the contextual conditions under which the rule applies. context can be either an \"ApiExpression\" or a \"ApiLogicalRelation\" instance.\n\n\n\n**ruleType** allowed values *Permissions*, *Prohibitions*, *Obligations*\n\n**ApiAction** structure (used for associating an actor, an operation, a resource and an organisation)\n\n\t\"id\" the ID of the action in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the action\n\n\t\"actor\" the actor of the action. actor can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"operation\" the operation of the action. operation can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"resource\" the resource of the action. resource can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"organisation\" the organisation of the action. organisation can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n**ApiEnhancedEntity** structure. Used for defining constraints upon Info model concepts (in the context of defining actors, operations, resources and organisations)\n\n\t\"id\" the ID of the enhanced entity in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the enhanced entity\n\n\t\"entityBase\" the information model concept being the base of the enhanced entity, e.g. MedicalRecord.\n\n\t\"constraint\" the constraint of the enhanced entity upon its base, e.g., owner equals XXX. constraint can be an \"ApiExpression\" or \"ApiLogicalRelation\" instance.\n\n**ApiExpression** structure (a single constraint)\n\n\t\"id\" the ID of the expression in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the expression\n\n\t\"subject\" the information model concept being the subject of the expression, e.g. Owner.\n\n\t\"operator\" the operator of the expression, e.g., equals. Operator values in the ontology:\n\n\t\"valueType\" the type of the expression value.\n\n\t\"policyModelEntityValue\" the complex value of the expression if the valueType is \"Variable\" or \"VariableBasedConstraint\". policyModelEntityValue can be an \"ApiVariable\" or an \"ApiVariableConstraint\" instance. \"stringValue\" is null.\n\n\t\"stringValue\" the string value of the expression if the valueType is \"Literal\" or \"InfoModelConcept\". \"stringValue\" can be a simple literal or an info model concept. \"policyModelEntityValue\" is null.\n\n\t\"isNested\" this flag denotes a complex expression subject, e.g. Owner.AssignedPhysician, opposed to a simple expression subject Owner.\n\n**valueType** allowed values: *Literal* (e.g., 40), *InfoModelConcept* (e.g., Patient), *Variable* (e.g. Action.Actor, where Action is the label of the referenced action), VariableBasedConstraint* (e.g. Action.Resource.Owner.AssignedPhysician)\n\n**ApiLogicalRelation** structure (used for logically relating *ApiExpressions*, *ApiRequiredActions* and *ApiLogicalRelations*)\n\n\t\"id\" the ID of the logical relation in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the logical relation\n\n\t\"children\" a list containing the logical relation's children, that can be \"APIRequiredAction\", \"ApiExpression\" or \"ApiLogicalRelation\" instances.\n\n\t\"logicalRelationType\" the type of the logical relation, i.e. AND, OR, XOR, NOT.\n\n**logicalRelationType** allowed values *AND* ,*OR*, *XOR*, *NOT*, *XOR*\n\n**APIRequiredAction** structure. Used for defining pre- and post- actions which can be later logically related to each other, through the definition of an action and of a sequence constraint.\n\n\t\"id\" the ID of the required (pre-/post-) action in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the required action\n\n\t\"action\" the action itself, it is an \"ApiAction\" instance\n\n\t\"sequenceConstraint\" denoting when the required action will be performed with regards to the main action of the rule (e.g, Before, After, etc).\n\n**ApiVariable** structure (used for pointing to other rule's elements)\n\n\t\"id\" the ID of the variable in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the variable (not making sense for variables though)\n\n\t\"variableStructure\" the String representation as defined in the editor, based on the label of the referenced entity: {Action}.Resource, {Action}.Operation, {Action}.Actor, {Action}.Organisation {Preaction<id>}.Resource, {Preaction<id>}.Operation, {Preaction<id>}.Actor, {Preaction<id>}.Organisation, {Postaction<id>}.Resource, {Postaction<id>}.Operation, {Postaction<id>}.Actor, {Postaction<id>}.Organisation, {Action}, {Preaction<id>}, {Postaction<id>}, Purpose, Context\n\n**ApiVariableConstraint** structure, used for accessing properties of variables, e.g. preAction1.Actor.Owner.AssignedPhysician. \n\n\t\"id\" the ID of the variable constraint in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the variable constraint(not making sense for variable constraints though)\n\n\t\"variableConstraintBase\" this can be an \"ApiVariable\" or an \"ApiVariableConstraint\" instance.\n\n\t\"constraintProperty\" this can be an \"ApiVariable\" (preAction1.Actor) or an \"ApiVariableConstraint\" (for nested cases, e.g., preAction1.Actor.Owner) instance."
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Rule ID:
                  description: Rule ID
                  value: PERca4f991b0bfd47e9bc1db7350e92b5fe
          description: Successful operation. Returns the ID of the created rule
      summary: Create new rule
      tags:
        - Policy Model API
    put:
      operationId: editRule
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Permission rule update example:
                description: Permission rule update example
                value:
                  '@type': ApiRule
                  id: PERca4f991b0bfd47e9bc1db7350e92b5fe
                  label: null
                  ruleType: Permissions
                  description: This is a test permission
                  purpose: AntiTerrorismOperations
                  action:
                    '@type': ApiAction
                    id: null
                    label: Action
                    actor:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnyRole
                      constraint: null
                    operation:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: Analyse
                      constraint: null
                    resource:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnonymisedData
                      constraint: null
                    organisation:
                      '@type': ApiEnhancedEntity
                      id: null
                      label: null
                      entityBase: AnyOrganisationType
                      constraint: null
                  preActionStructure: null
                  postActionStructure: null
                  context: null
                  derivedFromRuleID: null
            schema:
              $ref: '#/components/schemas/ApiRule'
        description: "Rule specification\n\n**@type** allowed values *ApiRule*, *ApiAction*, *ApiExpression*, *ApiLogicalRelation*, *APIRequiredAction*, *ApiVariable*, *ApiVariableConstraint*, *ApiEnhancedEntity*\n\n**ApiRule** structure\n\n\t\"id\" the ID of the rule in the ontology. ID of the rule is included in the body message and has been retrieved through GET rule\n\n\t\"label\" optional, just in case we want to define an alias for the rule\n\n\t\"ruleType\" the type of the rule (mandatory)\n\n\t\"description\" description of the rule\n\n\t\"purpose\" the purpose for which the rule applies (purpose is defined in the information model)\n\n\t\"action\" the action for which the rule applies, it is an \"ApiAction\" instance\n\n\t\"preActionStructure\" the pre-action/s that must have preceded the action of the rule. preActionStructure can be either an \"APIRequiredAction\" or a \"ApiLogicalRelation\" instance.\n\n\t\"postActionStructure\" the pre-action/s that must follow the action of the rule. postActionStructure can be either an \"APIRequiredAction\" or a \"ApiLogicalRelation\" instance.\n\n\t\"context\" the contextual conditions under which the rule applies. context can be either an \"ApiExpression\" or a \"ApiLogicalRelation\" instance.\n\n\n\n**ruleType** allowed values *Permissions*, *Prohibitions*, *Obligations*\n\n**ApiAction** structure (used for associating an actor, an operation, a resource and an organisation)\n\n\t\"id\" the ID of the action in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the action\n\n\t\"actor\" the actor of the action. actor can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"operation\" the operation of the action. operation can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"resource\" the resource of the action. resource can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n\t\"organisation\" the organisation of the action. organisation can be an \"ApiEnhancedEntity\", \"ApiVariable\" or \"ApiVariableConstraint\" instance.\n\n**ApiEnhancedEntity** structure. Used for defining constraints upon Info model concepts (in the context of defining actors, operations, resources and organisations)\n\n\t\"id\" the ID of the enhanced entity in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the enhanced entity\n\n\t\"entityBase\" the information model concept being the base of the enhanced entity, e.g. MedicalRecord.\n\n\t\"constraint\" the constraint of the enhanced entity upon its base, e.g., owner equals XXX. constraint can be an \"ApiExpression\" or \"ApiLogicalRelation\" instance.\n\n**ApiExpression** structure (a single constraint)\n\n\t\"id\" the ID of the expression in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the expression\n\n\t\"subject\" the information model concept being the subject of the expression, e.g. Owner.\n\n\t\"operator\" the operator of the expression, e.g., equals. Operator values in the ontology:\n\n\t\"valueType\" the type of the expression value.\n\n\t\"policyModelEntityValue\" the complex value of the expression if the valueType is \"Variable\" or \"VariableBasedConstraint\". policyModelEntityValue can be an \"ApiVariable\" or an \"ApiVariableConstraint\" instance. \"stringValue\" is null.\n\n\t\"stringValue\" the string value of the expression if the valueType is \"Literal\" or \"InfoModelConcept\". \"stringValue\" can be a simple literal or an info model concept. \"policyModelEntityValue\" is null.\n\n\t\"isNested\" this flag denotes a complex expression subject, e.g. Owner.AssignedPhysician, opposed to a simple expression subject Owner.\n\n**valueType** allowed values: *Literal* (e.g., 40), *InfoModelConcept* (e.g., Patient), *Variable* (e.g. Action.Actor, where Action is the label of the referenced action), VariableBasedConstraint* (e.g. Action.Resource.Owner.AssignedPhysician)\n\n**ApiLogicalRelation** structure (used for logically relating *ApiExpressions*, *ApiRequiredActions* and *ApiLogicalRelations*)\n\n\t\"id\" the ID of the logical relation in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the logical relation\n\n\t\"children\" a list containing the logical relation's children, that can be \"APIRequiredAction\", \"ApiExpression\" or \"ApiLogicalRelation\" instances.\n\n\t\"logicalRelationType\" the type of the logical relation, i.e. AND, OR, XOR, NOT.\n\n**logicalRelationType** allowed values *AND* ,*OR*, *XOR*, *NOT*, *XOR*\n\n**APIRequiredAction** structure. Used for defining pre- and post- actions which can be later logically related to each other, through the definition of an action and of a sequence constraint.\n\n\t\"id\" the ID of the required (pre-/post-) action in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the required action\n\n\t\"action\" the action itself, it is an \"ApiAction\" instance\n\n\t\"sequenceConstraint\" denoting when the required action will be performed with regards to the main action of the rule (e.g, Before, After, etc).\n\n**ApiVariable** structure (used for pointing to other rule's elements)\n\n\t\"id\" the ID of the variable in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the variable (not making sense for variables though)\n\n\t\"variableStructure\" the String representation as defined in the editor, based on the label of the referenced entity: {Action}.Resource, {Action}.Operation, {Action}.Actor, {Action}.Organisation {Preaction<id>}.Resource, {Preaction<id>}.Operation, {Preaction<id>}.Actor, {Preaction<id>}.Organisation, {Postaction<id>}.Resource, {Postaction<id>}.Operation, {Postaction<id>}.Actor, {Postaction<id>}.Organisation, {Action}, {Preaction<id>}, {Postaction<id>}, Purpose, Context\n\n**ApiVariableConstraint** structure, used for accessing properties of variables, e.g. preAction1.Actor.Owner.AssignedPhysician. \n\n\t\"id\" the ID of the variable constraint in the ontology\n\n\t\"label\" optional, just in case we want to define an alias for the variable constraint(not making sense for variable constraints though)\n\n\t\"variableConstraintBase\" this can be an \"ApiVariable\" or an \"ApiVariableConstraint\" instance.\n\n\t\"constraintProperty\" this can be an \"ApiVariable\" (preAction1.Actor) or an \"ApiVariableConstraint\" (for nested cases, e.g., preAction1.Actor.Owner) instance."
        required: true
      responses:
        '200':
          content:
            text/plain:
              examples:
                Rule ID:
                  description: Rule ID
                  value: PERca4f991b0bfd47e9bc1db7350e92b5fe
          description: Successful operation. Returns the ID of the updated rule
      summary: Edit rule
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/rule/count:
    get:
      description: used in lazy loaded tables
      operationId: getRulesCount
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
        - description: >-
            rule type of interest. Allowed values: *Permissions*,
            *Prohibitions*, *Obligations*
          in: query
          name: ruleType
          required: false
          schema:
            type: string
        - description: rule ID criterion
          in: query
          name: searchRuleId
          required: false
          schema:
            type: string
        - description: purpose criterion
          in: query
          name: searchPurpose
          required: false
          schema:
            type: string
        - description: rule description criterion
          in: query
          name: searchDescription
          required: false
          schema:
            type: string
        - description: actor criterion
          in: query
          name: searchActor
          required: false
          schema:
            type: string
        - description: operation criterion
          in: query
          name: searchOperation
          required: false
          schema:
            type: string
        - description: resource criterion
          in: query
          name: searchResource
          required: false
          schema:
            type: string
        - description: organisation criterion
          in: query
          name: searchOrganisation
          required: false
          schema:
            type: string
        - description: derived from rule with ID criterion
          in: query
          name: derivedFromRuleID
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Number of rules:
                  description: Number of rules
                  value: 5
          description: >-
            Successful operation. Returns the number of rules based on provided
            search criteria
      summary: Count rules
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/rule/metaRules:
    post:
      operationId: extractMetaRules
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while extracting meta-rules:
                  description: Error while extracting meta-rules
                  value: false
                Successful meta-rules extraction:
                  description: Successful meta-rules extraction
                  value: true
          description: >-
            Successful operation. Response boolean value indicated meta-rules
            extraction success
      summary: Extract meta-rules
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/rule/searchApplicable:
    post:
      operationId: getApplicableRules
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Search rule criteria example:
                description: Search rule criteria example
                value:
                  purpose: RightOfAccess
            schema:
              $ref: '#/components/schemas/CompositeSearchRuleCriteria'
        description: Composite search rule criteria
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                List of applicable rules:
                  description: List of applicable rules
                  value:
                    - '@type': ApiRule
                      id: PERf1ce653996b7428aa6f4c052f30489ec
                      label: null
                      ruleType: Permissions
                      description: >-
                        Data subjects should have write access to their data -->
                        Data subjects can only update their county --> Update
                        will be logged afterwards
                      purpose: DataRectification
                      action:
                        '@type': ApiAction
                        id: AC1c4a8078586c4809a83ed2148db862f7
                        label: Action
                        actor:
                          '@type': ApiEnhancedEntity
                          id: EE7831e1c7d52f401ab3093cea6bb198d4
                          label: null
                          entityBase: DataSubject
                          constraint: null
                        operation:
                          '@type': ApiEnhancedEntity
                          id: EEf6897e9b44e0447c86af86ad1f9e0c6a
                          label: null
                          entityBase: Write
                          constraint: null
                        resource:
                          '@type': ApiEnhancedEntity
                          id: EEf6ea87901e2742aea2140cd501789779
                          label: null
                          entityBase: County
                          constraint:
                            '@type': ApiExpression
                            id: PEX372ad1436b9845c384c29c2a4206f228
                            label: null
                            subject: OwnerId
                            operator: equals
                            stringValue: null
                            policyModelEntityValue:
                              '@type': ApiVariableConstraint
                              id: VC1269def2939c403b8e628a78bb0b0a70
                              label: null
                              variableConstraintBase:
                                '@type': ApiVariable
                                id: VARbe5914ccee494c39bcbf17b37f91c526
                                label: null
                                variableStructure: Action.Actor
                              constraintProperty: Id
                            valueType: VariableBasedConstraint
                            isNested: false
                        organisation:
                          '@type': ApiEnhancedEntity
                          id: EEdc5df22462de4a67bf057cc8fd9a9896
                          label: null
                          entityBase: InternalOrganisation
                          constraint: null
                      preActionStructure: null
                      postActionStructure:
                        '@type': APIRequiredAction
                        id: RACa14964e71b3f4f2db89389b5232f2a2b
                        label: null
                        action:
                          '@type': ApiAction
                          id: ACcd956b8410f84469933bafe73d5324e9
                          label: Postaction1
                          actor:
                            '@type': ApiEnhancedEntity
                            id: EE4b0fd06390a44a0d9b61f1595066b60e
                            label: null
                            entityBase: Administrator
                            constraint: null
                          operation:
                            '@type': ApiEnhancedEntity
                            id: EEc4c0fcd6348f451e8de45c55b4a74c8a
                            label: null
                            entityBase: LogAccessControlDecision
                            constraint: null
                          resource:
                            '@type': ApiEnhancedEntity
                            id: EE3f6ebd21995c453eabc5ef6ba518ce91
                            label: null
                            entityBase: AccessControlLog
                            constraint: null
                          organisation:
                            '@type': ApiEnhancedEntity
                            id: EEfbb02da82aab4b07add05977b023cba4
                            label: null
                            entityBase: InternalOrganisation
                            constraint: null
                        sequenceConstraint: After
                      context: null
                      derivedFromRuleID: null
                    - '@type': ApiRule
                      id: PER87b579de655e493791d685bf097308ae
                      label: null
                      ruleType: Permissions
                      description: >-
                        Data subjects should have write access to their data -->
                        Data subjects can only update their county --> Update
                        will be logged afterwards
                      purpose: DataRectification
                      action:
                        '@type': ApiAction
                        id: AC2b3235b6be9c4ffb85636f5122758fff
                        label: Action_Inferred
                        actor:
                          '@type': ApiEnhancedEntity
                          id: EEce9d613ee0c1416fb68f12019d29c9c3
                          label: null
                          entityBase: Patient
                          constraint: null
                        operation:
                          '@type': ApiEnhancedEntity
                          id: EEc3b5fa0409244e4e9383a5bc7cb114e0
                          label: null
                          entityBase: UpdatePersonalInformation
                          constraint: null
                        resource:
                          '@type': ApiEnhancedEntity
                          id: EE804b34ab3be94f6d9e89b24d841ff607
                          label: null
                          entityBase: County
                          constraint:
                            '@type': ApiExpression
                            id: PEX9275b511661c41dd8ef99c8badaf70f9
                            label: null
                            subject: OwnerId
                            operator: equals
                            stringValue: null
                            policyModelEntityValue:
                              '@type': ApiVariableConstraint
                              id: VC9f4edbd9cd7149629dff5dd62693bfcd
                              label: null
                              variableConstraintBase:
                                '@type': ApiVariable
                                id: VARa342142a69014d28b033e3c6b3629047
                                label: null
                                variableStructure: Action_Inferred.Actor
                              constraintProperty: Id
                            valueType: VariableBasedConstraint
                            isNested: false
                        organisation:
                          '@type': ApiEnhancedEntity
                          id: EE5e1f33048e014cfead8a9060b261f6cd
                          label: null
                          entityBase: InternalOrganisation
                          constraint: null
                      preActionStructure: null
                      postActionStructure:
                        '@type': APIRequiredAction
                        id: RAC6f18bcbabe5149a099885b61a5f12eeb
                        label: null
                        action:
                          '@type': ApiAction
                          id: AC80bb533f081a4e0d99947ca73c48402e
                          label: Postaction1
                          actor:
                            '@type': ApiEnhancedEntity
                            id: EE81a9f3d03d9441968098a8e366ba016d
                            label: null
                            entityBase: Administrator
                            constraint: null
                          operation:
                            '@type': ApiEnhancedEntity
                            id: EEb4859d7e927e4f31858f81615b97721d
                            label: null
                            entityBase: LogAccessControlDecision
                            constraint: null
                          resource:
                            '@type': ApiEnhancedEntity
                            id: EE6449e4f9e1dc404f8c22d48cc5f17e6f
                            label: null
                            entityBase: AccessControlLog
                            constraint: null
                          organisation:
                            '@type': ApiEnhancedEntity
                            id: EE9387ce6a9b834d0ca2f787a5cad47b80
                            label: null
                            entityBase: InternalOrganisation
                            constraint: null
                        sequenceConstraint: After
                      context: null
                      derivedFromRuleID: PERf1ce653996b7428aa6f4c052f30489ec
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiRule'
          description: Successful operation. Returns applicable rules specification
      summary: Search applicable rules
      tags:
        - Policy Model API
  /policyModel/{companyID}/{policyModelID}/rule/{ruleID}:
    delete:
      operationId: deleteRule
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
        - description: ID of the unique name of the rule
          in: path
          name: ruleID
          required: true
          schema:
            type: string
        - description: >-
            denotes whether deletion will be propagated towards all associated
            metarules
          in: query
          name: propagateDeletionToDescendants
          required: true
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                Error while deleting rule:
                  description: Error while deleting rule
                  value: false
                Successful rule deletion:
                  description: Successful rule deletion
                  value: true
          description: >-
            Successful operation. Returns boolean value indicated actual rule
            deletion
      summary: Delete rule
      tags:
        - Policy Model API
    get:
      operationId: getRule
      parameters:
        - description: ID of the company
          in: path
          name: companyID
          required: true
          schema:
            type: string
        - description: ID of the policy model
          in: path
          name: policyModelID
          required: true
          schema:
            type: string
        - description: ID of the unique name of the rule
          in: path
          name: ruleID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Permission rule:
                  description: Permission rule
                  value:
                    '@type': ApiRule
                    id: null
                    label: null
                    ruleType: Permissions
                    description: This is a test permission
                    purpose: AntiTerrorismOperations
                    action:
                      '@type': ApiAction
                      id: null
                      label: Action
                      actor:
                        '@type': ApiEnhancedEntity
                        id: null
                        label: null
                        entityBase: AnyRole
                        constraint: null
                      operation:
                        '@type': ApiEnhancedEntity
                        id: null
                        label: null
                        entityBase: Analyse
                        constraint: null
                      resource:
                        '@type': ApiEnhancedEntity
                        id: null
                        label: null
                        entityBase: AnonymisedData
                        constraint: null
                      organisation:
                        '@type': ApiEnhancedEntity
                        id: null
                        label: null
                        entityBase: AnyOrganisationType
                        constraint: null
                    preActionStructure: null
                    postActionStructure: null
                    context: null
                    derivedFromRuleID: null
              schema:
                $ref: '#/components/schemas/ApiRule'
          description: Successful operation. Returns rule specification
      summary: Get rule
      tags:
        - Policy Model API
components:
  schemas:
    ApiAction:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiPolicyModelEntity'
        - type: object
          properties:
            actor:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            operation:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            organisation:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            resource:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
    ApiActionEntity:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
        - type: object
          properties:
            concept:
              type: string
            concreteEntity:
              type: string
            constraint:
              $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
    ApiConflict:
      type: object
      properties:
        intention:
          $ref: '#/components/schemas/ApiIntention'
        originalRuleIds:
          type: array
          items:
            type: string
        updatedIntention:
          $ref: '#/components/schemas/ApiUpdatedIntention'
    ApiConflictRequest:
      type: object
      properties:
        intention:
          $ref: '#/components/schemas/ApiIntention'
        usageConstraints:
          type: object
    ApiEnhancedEntity:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiPolicyModelEntity'
        - type: object
          properties:
            concreteEntity:
              type: string
            constraint:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            entityBase:
              type: string
    ApiIntention:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/ApiActionEntity'
        context:
          $ref: '#/components/schemas/ApiPolicyModelEntity'
        operation:
          $ref: '#/components/schemas/ApiActionEntity'
        purpose:
          type: string
        resource:
          $ref: '#/components/schemas/ApiActionEntity'
    ApiODRLConflictRequest:
      type: object
      properties:
        odrlRequest:
          type: object
        usageConstraints:
          type: object
    ApiPolicyModelEntity:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    ApiRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ApiPolicyModelEntity'
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/ApiAction'
            context:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            derivedFromRuleID:
              type: string
            description:
              type: string
            postActionStructure:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            preActionStructure:
              $ref: '#/components/schemas/ApiPolicyModelEntity'
            purpose:
              type: string
            ruleType:
              type: string
              enum:
                - Permissions
                - Prohibitions
                - Obligations
      required:
        - ruleType
    ApiSimplifiedPolicyModelEntity:
      type: object
    ApiUpdatedIntention:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/ApiActionEntity'
        combinedResources:
          type: array
          items:
            $ref: '#/components/schemas/ApiActionEntity'
        context:
          $ref: '#/components/schemas/ApiPolicyModelEntity'
        negativePostActions:
          type: array
          items:
            $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
        negativePreActions:
          type: array
          items:
            $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
        operation:
          $ref: '#/components/schemas/ApiActionEntity'
        positivePostActions:
          type: array
          items:
            $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
        positivePreActions:
          type: array
          items:
            $ref: '#/components/schemas/ApiSimplifiedPolicyModelEntity'
        purpose:
          type: string
        resource:
          $ref: '#/components/schemas/ApiActionEntity'
    Attribute:
      required:
        - attributeName
        - attributeType
      type: object
      properties:
        attributeID:
          type: string
        attributeName:
          type: string
        attributeType:
          type: string
          enum:
            - SEMANTIC_TYPE
            - SEMANTIC_INSTANCE
            - SEMANTIC_LIST
            - STRING
            - INTEGER
            - DOUBLE
            - DATE
            - BOOLEAN
            - STRING_LIST
            - DOUBLE_LIST
            - INTEGER_LIST
        attributeValue:
          type: object
        belongsToInfoModelEntity:
          type: string
        inheritedFrom:
          type: string
        isMutable:
          type: boolean
    CompositeSearchRuleCriteria:
      type: object
      properties:
        actorEntity:
          $ref: '#/components/schemas/ApiEnhancedEntity'
        context:
          $ref: '#/components/schemas/ApiPolicyModelEntity'
        description:
          type: string
        operationEntity:
          $ref: '#/components/schemas/ApiEnhancedEntity'
        organisationEntity:
          $ref: '#/components/schemas/ApiEnhancedEntity'
        purpose:
          type: string
        resourceEntity:
          $ref: '#/components/schemas/ApiEnhancedEntity'
    InformationModelEdge:
      required:
        - edgeType
        - sourceNode
        - targetNode
      type: object
      properties:
        edgeType:
          type: string
          enum:
            - HAS_ATTRIBUTE
            - HAS_ATTRIBUTE_INVERSE
            - HAS_NAME
            - HAS_TYPE
            - HAS_VALUE
            - HAS_STRING_VALUE
            - REFERS_TO_DATA_TYPE
            - IS_OF_STATE
            - IS_OF_FLOW_TYPE
            - HOSTS_CONTAINER
            - ACCEPTS_HUMAN_ACTOR
            - PROVIDES_OPERATION_INVERSE
            - IMPLEMENTED_BY
            - COMPLIANT_WITH_PURPOSE
            - HAS_INPUT
            - HAS_OUTPUT
            - HOSTS_CONTAINER_INVERSE
            - PROVIDES_OPERATION
            - COMPLIANT_WITH_PURPOSE_INVERSE
            - MAY_ACT_FOR_PURPOSE_INVERSE
            - MAY_ACT_FOR_PURPOSE
            - HAS_STATE_TYPE
            - HAS_STATE_VALUE
            - HAS_DEFAULT_STATE_VALUE
            - HAS_POTENTIAL_STATE_VALUE
            - IS_A
            - IS_A_INVERSE
            - IS_PART_OF
            - CONTAINS
            - MORE_DETAILED_THAN
            - LESS_DETAILED_THAN
        sourceNode:
          $ref: '#/components/schemas/InformationModelNode'
        targetNode:
          $ref: '#/components/schemas/InformationModelNode'
    InformationModelNode:
      required:
        - name
        - nodeType
      type: object
      properties:
        name:
          type: string
        nodeType:
          type: string
          enum:
            - ROLES
            - EVENT_TYPES
            - OPERATIONS
            - DATA_TYPES
            - MACHINE_TYPES
            - PURPOSES
            - ATTRIBUTES
            - ATTRIBUTE_NAMES
            - ATTRIBUTE_TYPES
            - CONTEXT_TYPES
            - DATA_IOS
            - FLOWTYPES
            - ORGANISATION_TYPES
            - STATES
            - STATE_TYPES
            - STATE_VALUES
            - OPERATION_CONTAINER_TYPES
        outputFormat:
          type: string
          writeOnly: true
          enum:
            - ROLES
            - EVENT_TYPES
            - OPERATIONS
            - DATA_TYPES
            - MACHINE_TYPES
            - PURPOSES
            - ATTRIBUTES
            - ATTRIBUTE_NAMES
            - ATTRIBUTE_TYPES
            - CONTEXT_TYPES
            - DATA_IOS
            - FLOWTYPES
            - ORGANISATION_TYPES
            - STATES
            - STATE_TYPES
            - STATE_VALUES
            - OPERATION_CONTAINER_TYPES
    InformationModelRelation:
      required:
        - direction
        - name
        - nodeType
        - relationType
      type: object
      properties:
        direction:
          type: string
        name:
          type: string
        nodeType:
          type: string
          enum:
            - ROLES
            - EVENT_TYPES
            - OPERATIONS
            - DATA_TYPES
            - MACHINE_TYPES
            - PURPOSES
            - ATTRIBUTES
            - ATTRIBUTE_NAMES
            - ATTRIBUTE_TYPES
            - CONTEXT_TYPES
            - DATA_IOS
            - FLOWTYPES
            - ORGANISATION_TYPES
            - STATES
            - STATE_TYPES
            - STATE_VALUES
            - OPERATION_CONTAINER_TYPES
        relationType:
          type: string
          enum:
            - HAS_ATTRIBUTE
            - HAS_ATTRIBUTE_INVERSE
            - HAS_NAME
            - HAS_TYPE
            - HAS_VALUE
            - HAS_STRING_VALUE
            - REFERS_TO_DATA_TYPE
            - IS_OF_STATE
            - IS_OF_FLOW_TYPE
            - HOSTS_CONTAINER
            - ACCEPTS_HUMAN_ACTOR
            - PROVIDES_OPERATION_INVERSE
            - IMPLEMENTED_BY
            - COMPLIANT_WITH_PURPOSE
            - HAS_INPUT
            - HAS_OUTPUT
            - HOSTS_CONTAINER_INVERSE
            - PROVIDES_OPERATION
            - COMPLIANT_WITH_PURPOSE_INVERSE
            - MAY_ACT_FOR_PURPOSE_INVERSE
            - MAY_ACT_FOR_PURPOSE
            - HAS_STATE_TYPE
            - HAS_STATE_VALUE
            - HAS_DEFAULT_STATE_VALUE
            - HAS_POTENTIAL_STATE_VALUE
            - IS_A
            - IS_A_INVERSE
            - IS_PART_OF
            - CONTAINS
            - MORE_DETAILED_THAN
            - LESS_DETAILED_THAN
  securitySchemes:
    Bearer-jwt:
      bearerFormat: JWT
      in: header
      name: Authorization
      scheme: bearer
      type: http
